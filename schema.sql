CREATE OR REPLACE FUNCTION add_tick(t timestamp with time zone)
RETURNS integer
AS
$$
BEGIN
RETURN FLOOR((EXTRACT(HOUR FROM t)+2)/2) + (EXTRACT(ISODOW FROM now())-1)*12;
END;
$$
LANGUAGE plpgsql; 

/*carts table */
create table
  public.carts (
    id integer generated always as identity,
    customer_name text not null,
    payment_string text null,
    created_at timestamp with time zone not null default now(),
    tick integer not null default add_tick (now()),
    constraint carts_pkey primary key (id)
  ) tablespace pg_default;

/*cart items table */
create table
  public.cart_items (
    id integer generated always as identity,
    potion_inventory_id integer null,
    quantity integer not null default 0,
    cart_id integer null,
    constraint cart_items_pkey primary key (id),
    constraint unique_order unique (cart_id, potion_inventory_id),
    constraint cart_items_potion_inventory_id_fkey foreign key (potion_inventory_id) references potion_inventory (id),
    constraint cart_items_cart_id_fkey foreign key (cart_id) references carts (id)
  ) tablespace pg_default;

/*acounts table*/
create table
  public.accounts (
    id bigint generated by default as identity,
    name text null,
    joined_at timestamp with time zone not null default now(),
    constraint accounts_pkey primary key (id),
    constraint accounts_id_key unique (id),
    constraint accounts_name_key unique (name)
  ) tablespace pg_default;

insert into accounts
(name)
values
(Joel)
(Roxanne)
(Bottler)

/*transactions table*/
create table
  public.transactions (
    id bigint generated by default as identity,
    created_at timestamp with time zone not null default now(),
    description text null,
    tick integer not null default add_tick(now()),   
    constraint transactions_pkey primary key (id)
  ) tablespace pg_default;


create table
  public.ml_ledger (
    id bigint generated by default as identity,
    account_id bigint not null,
    transaction_id bigint not null,
    red_quantity integer not null default 0,
    green_quantity integer not null default 0,
    blue_quantity integer not null default 0,
    dark_quantity integer not null default 0,
    constraint ml_ledger_pkey primary key (id),
    constraint ml_ledger_account_id_fkey foreign key (account_id) references accounts (id),
    constraint ml_ledger_transaction_id_fkey foreign key (transaction_id) references transactions (id)
  ) tablespace pg_default;


/*gold_ledger*/
create table
  public.gold_ledger (
    id bigint generated by default as identity,
    quantity integer not null,
    account_id bigint not null,
    transaction_id bigint not null,
    constraint gold_ledger_pkey primary key (id),
    constraint gold_ledger_account_id_fkey foreign key (account_id) references accounts (id),
    constraint gold_ledger_transaction_id_fkey foreign key (transaction_id) references transactions (id)
  ) tablespace pg_default;

/*potion_ledger*/
create table
  public.potion_ledger (
    id bigint generated by default as identity,
    account_id bigint not null,
    transaction_id bigint not null,
    potion_id bigint not null,
    quantity integer not null,
    constraint potion_ledger_pkey primary key (id),
    constraint potion_ledger_account_id_fkey foreign key (account_id) references accounts (id),
    constraint potion_ledger_potion_id_fkey foreign key (potion_id) references potion_inventory (id),
    constraint potion_ledger_transaction_id_fkey foreign key (transaction_id) references transactions (id)
  ) tablespace pg_default;



/*
potion_inventory table
*/
create table
  public.potion_inventory (
    id bigint generated by default as identity,
    price integer not null default 0,
    sku text null,
    potion_type integer[] not null default '{}'::integer[],
    name text null,
    max_potion integer not null default 0,
    constraint potion_inventory_pkey primary key (id)
  ) tablespace pg_default;



/*used for reference*/
/*ticks table (use as a reference for ticks id)
Fields:(prepopulated with 7*12 rows)
dow: int 1-7
time_initial(hour) : int 0-24 
time_end(hour): int 0-24 
ex: if run at 13(1pm) then initial: 12, end: 14
we'll use a csv file to streamline the process... located at tick_table.csv
add id field seperately in supabase...
*/
